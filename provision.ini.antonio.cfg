#    W A R N I N G
#
#    This file must be compatible with all supported appliance versions that are in the field.
#    This means its properties and sections must comprise a union set of all needed values
#    by all supported appliance versions.  In time we will probably fix the gateway service to
#    generate version specific files but for now the superset approach works.

# this section lists all config values the provisioning script will ask for.  If the value is blank
# a value must be provided interactively.  If not blank it will be prompted but offer the current
# value as a default.
[ProvisioningConfigInteractive]
applianceQueueName=dda90cf4-26fa-45ba-871a-383639e95052
tenantId=110
destinationHost=core.rguest.com
destinationPort=443
destinationProto=wss
cloudUserServiceUri=https://core.rguest.com/user-service/
provisioningClientId=581a26a618ca95000178c300
provisioningApiUserName=c9929718-3a6c-46ea-84a2-48da0450729d
provisioningKey=be965b1c442c2e645f6ec087caac7a98efcc64ef096c34a6775881fda155c3d98c35e27c4013e47abb47335aed7c4c1c5502366273085ea7b7b7d2a86bc37e9d
provisioningInstallerUsername=applianceinstaller
provisioningInstallerPassword=InstallAppliance2
notificationEmail=admin@agilysys.com
dockerRegistryUri=gcr.io/fifth_winter_840
appliance_data_image_version=16.7.1.2
rabbitmq_docker_image_version=1.6
web_socket_client_docker_image_version=1.14.10.1
rguestplat_docker_image_version=3.14.23.1

# these values will NOT be prompted for but will be used to detemplatize/configure the daemon
# as is.
[ProvisioningConfigNoninteractive]
sudoPrefix=/usr/bin/sudo
provisionManifestVersion=00000000-0000-0000-0000-000000000000
provisioningInstallerXtoken=
dockerCommand=/usr/bin/docker
shutdownCommand=shutdown
rmqQueueName=ControllerQueue
rmqExchangeName=toApplianceApplications
toCloudQueueName=toCloudApplications
varDirRoot=/var/agilysys/applianceController
manifestDir=manifests
mongoHost=172.17.42.1
mongoIp=172.17.42.1
mongoPort=27017
mongoDbName=Platform
mongoCoreDbName=rGuestCore
mongoUseAuth=false
mongoUseSsl=false
mongoUser=
mongoPass=
serviceAggregatorHost=172.17.0.1
serviceAggregatorPort=8080
rmqUri=172.17.42.1
rmqPort=5672
rmqUsername=guest
rmqPassword=guest
rmqVirtualHost=/
destinationPath=/commands
haproxyStubFile=haproxy.config.base
haproxyConfigFile=/etc/haproxy/haproxy.cfg
dockerRecoveryMacro=dockerRecoveryMacro.sh
gCloudUpdateCredentialsMacro=gCloudUpdateCredentialsMacro.sh
localUserServiceUri=http://localhost:8080/user-service/
localUserServiceUsername=ApiUserName
serviceCommand=/sbin/service
logstashSyslogDockerPort=1915
loggingHost=172.17.42.1
loggingPort=1915
applianceName=Drury_IA_San_Antonio_Med
applianceDescription=Appliance for Drury San Antonio Med
manifestName=
manifestDescription=
applianceLifecycleState=CREATED

# Validation regexes.  TODO
[ProvisioningValidation]
applianceQueueName=\w+

# these values, if present and matching key to the ProvisioningInteractive values will be used to describe
# the configuration setting of same name when being prompted to enter the value.
[ProvisioningConfigNotes]
cloudUserServiceUri=The complete uri to the cloud user service, e.g. https://cloud-userservice-host:port/..../user-service/
applianceQueueName=the UUID (hexadecimal 8-4-4-4-12) appliance queue name (e.g. unique identifier) as provisioned in the cloud.
destinationHost=the fully qualified host name to which appliance will connect to receive command and control messages from the cloud.
destinationPort=the tcp port where command and control messages received from the cloud.
destinationPath=the virtual path at which command and control message received from the cloud.
provisionManifestVersion=The initial UUID manifest version.
dockerRegistryUri=host:port of docker registry.  (Use docker-registry.bellevue.agilysys.com:5000 for development.)
destinationProto=ws or wss (ws == port 80, wss == SSL port 443)
tenantId=The Tenant Id.
provisioningClientId=The Client Id.
provisioningApiUserName=API user name as provided during cloud based provisioning.
provisioningApiKeySecret=Key secret provided during cloud based provisioning.
provisioningInstallerUsername=installers user name for provisioning.
provisioningInstallerPassword=installers password for provisioning.
provisioningInstallerXtoken=X Token for provisioning, as an option instead of username and password.
notificationEmail=Email address to send warnings to ON SITE maintenance staff, e.g. hotel IT department.

# Baker appliance only uses this section.
# these are commands that will be run before creating the default manifest and other configuration files
# The key is arbitrary but all will be iterated over in natural sort order, e.g. alphabetic.
# The value is a string representation of a python tuple of strings, so for example the command "ls -l 'a b' " would be
# encoded as ('ls','-l','a b')
[PrepareCommands]
0_preProvisionCleanup=('/bin/bash', '-c', 'rm -f /var/agilysys/applianceController/manifests/manifest*')

# these are commands that will be run after creating the manifest and other configuration files
# to further set things up.  The key is arbitrary but all will be iterated over in
# natural sort order, e.g. alphabetic.
# The value is a string representation of a python tuple of strings, so for example the command "ls -l 'a b' " would be
# encoded as ('ls','-l','a b')
[SetupCommands]
# the supervisord stop is intentional.   It will startup upon next boot owing to chkconfig settings, or there is a
# menu item in the provision.sh script to start it.  This way after provisioning it doesn't automatically
# start in case there is more fussing about you want to do.  This also ensures reprovisioning forces a restart.
0_supervisordStop=('/sbin/service','supervisord','stop')
1_fixManifestDir=('chmod', '-R', 'a+rwx', '/var/agilysys/applianceController/manifests')
2_supervisordEnable=('/sbin/chkconfig','supervisord','on')
3_filebeatRestart=('/sbin/service', 'filebeat', 'restart')

# files listed here will be de-templatized and values like %%destinationHost%% replaced
# with values from ProvisioningConfigInteractive and ProvisioningConfigNonInteractive sections.   (you can
# use whatever key you want here, script will iterate over all keys in this section...
# if a substitution fails to resolve script will fail with an error message.
# The value before : is the path to the file to be detemplatized (relative to working directory)  The path
# After : is the place to write the detemplatized file.
[Template]
manifest=etc/manifest.default.template:/var/agilysys/applianceController/manifests/manifest.default
manifestfallback=etc/manifest.default.template:etc/manifest.fallback
filebeat_appliance_id_filter=etc/filebeat.yml.template:/etc/filebeat/filebeat.yml
componentsHealthCheckJson=etc/componentsHealthCheck.json.template:etc/componentsHealthCheck.json

# all values from ProvisioningConfigInteractive and ProvisioningConfigNonInteractive will be appended
# to the stub file in  key=value format to the following file(s).  Script will iterate over all keys in this section.
# The value before : is the path to the file to be detemplatized (relative to working directory)  The path
# After : is the place to write the detemplatized file.
[Append]
mainConfigFile=etc/config.ini.stub:etc/config.ini

[ProvisioningConfig]
templateDelimPrefix=%%
templateDelimPostfix=%%


